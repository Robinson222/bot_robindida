# ‚úÖ BOT CRIPTO MULTITAREA Y MEJORADO (VERSI√ìN FINAL)
# Analiza el mercado cada hora, detecta nuevas monedas, env√≠a se√±ales con imagen y responde en Telegram

import threading
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
import ta
import requests
import time
import datetime
import os
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

# ========================
# CONFIGURACI√ìN GENERAL
# ========================
TOKEN = "7545625230:AAGxAtfVyPlI7gFWPf6Gd3N3JZKUX1LIVF0"
CHAT_ID = "7591626762"
TIMEFRAME = "1h"
INTERVALO_ANALISIS = 60 * 60  # 1 hora
LISTA_USDT_FILE = "pares_usdt.txt"
EXCEL_FILE = "registro_senales.xlsx"
SYMBOLS = ["ARPA/USDT", "SUI/USDT", "BTC/USDT"]

# ========================
# ENVIAR MENSAJE A TELEGRAM
# ========================
def enviar_mensaje(texto):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": texto}
    try:
        requests.post(url, data=data)
        print(f"‚úÖ Mensaje enviado: {texto}")
    except Exception as e:
        print("‚ùå Error enviando mensaje:", e)

# ========================
# ENVIAR IMAGEN A TELEGRAM
# ========================
def enviar_imagen(file_path):
    url = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
    try:
        with open(file_path, 'rb') as img:
            files = {'photo': img}
            data = {"chat_id": CHAT_ID}
            requests.post(url, files=files, data=data)
            print(f"üì∑ Imagen enviada: {file_path}")
    except Exception as e:
        print("‚ùå Error enviando imagen:", e)

# ========================
# DETECTAR NUEVOS PARES USDT
# ========================
def detectar_nuevos_pares(exchange):
    nuevos = []
    todos = exchange.load_markets()
    pares_usdt = [s for s in todos if s.endswith("/USDT")]

    if not os.path.exists(LISTA_USDT_FILE):
        with open(LISTA_USDT_FILE, "w") as f:
            f.write("\n".join(pares_usdt))
        return []

    with open(LISTA_USDT_FILE, "r") as f:
        anteriores = f.read().splitlines()

    nuevos = list(set(pares_usdt) - set(anteriores))

    if nuevos:
        with open(LISTA_USDT_FILE, "w") as f:
            f.write("\n".join(pares_usdt))

    return nuevos

# ========================
# AN√ÅLISIS T√âCNICO Y SE√ëALES
# ========================
def analizar_mercado(exchange, symbol):
    try:
        print(f"üîç Analizando {symbol}...")
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=TIMEFRAME, limit=100)
        df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df.set_index("timestamp", inplace=True)

        df["rsi"] = ta.momentum.RSIIndicator(df["close"], window=14).rsi()
        df["ma7"] = df["close"].rolling(window=7).mean()
        df["ma25"] = df["close"].rolling(window=25).mean()
        macd = ta.trend.MACD(df["close"])
        df["macd"] = macd.macd_diff()

        ultima = df.iloc[-1]
        se√±al = None

        if ultima["rsi"] < 30 and ultima["ma7"] > ultima["ma25"] and ultima["macd"] > 0:
            se√±al = "üìà Compra (RSI bajo, cruce alcista, MACD positivo)"
        elif ultima["rsi"] > 70 and ultima["ma7"] < ultima["ma25"] and ultima["macd"] < 0:
            se√±al = "üìâ Venta (RSI alto, cruce bajista, MACD negativo)"

        if se√±al:
            mensaje = f"üîî Se√±al detectada en {symbol}\n{se√±al}\nPrecio: ${ultima['close']:.2f}"
            enviar_mensaje(mensaje)
            generar_imagen(df, symbol)
            enviar_imagen(f"{symbol.replace('/', '_')}.png")
            registrar_senal(symbol, ultima["close"], se√±al)
        else:
            print(f"‚è∏ Sin se√±al para {symbol}")

    except Exception as e:
        print(f"‚ùå Error al analizar {symbol}: {e}")

# ========================
# GENERAR IMAGEN DEL GR√ÅFICO
# ========================
def generar_imagen(df, symbol):
    df_plot = df[["open", "high", "low", "close", "volume"]].copy()
    mpf.plot(df_plot, type='candle', volume=True, style='charles',
             title=f"Gr√°fico {symbol}", savefig=f"{symbol.replace('/', '_')}.png")

# ========================
# REGISTRAR EN EXCEL
# ========================
def registrar_senal(symbol, precio, se√±al):
    ahora = datetime.datetime.now()
    data = {"fecha": [ahora], "par": [symbol], "precio": [precio], "se√±al": [se√±al]}
    nuevo = pd.DataFrame(data)
    if os.path.exists(EXCEL_FILE):
        existente = pd.read_excel(EXCEL_FILE)
        df = pd.concat([existente, nuevo], ignore_index=True)
    else:
        df = nuevo
    df.to_excel(EXCEL_FILE, index=False)
    print(f"üìä Se√±al registrada para {symbol} en Excel")

# ========================
# RESPONDER MENSAJES EN TELEGRAM CON BOTONES
# ========================
def responder_info(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è ¬øQu√© hace este bot?", callback_data='info')],
        [InlineKeyboardButton("üìä Ver √∫ltimas se√±ales", callback_data='ultimas')],
        [InlineKeyboardButton("üÜò Ayuda", callback_data='ayuda')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üëã Hola, soy tu bot cripto. ¬øQu√© quieres hacer?",
        reply_markup=reply_markup
    )

def manejar_botones(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "info":
        texto = (
            "üöÄ *¬øQu√© hace este bot?*\n"
            "‚Ä¢ Analiza el mercado cada hora\n"
            "‚Ä¢ Env√≠a se√±ales de compra/venta\n"
            "‚Ä¢ Muestra gr√°ficas e indicadores\n"
            "‚Ä¢ Detecta nuevas monedas listadas\n"
            "‚Ä¢ Responde por Telegram con gr√°ficos\n"
            "‚Ä¢ Registra se√±ales en Excel\n"
            "‚úÖ ¬°Trabaja 24/7 para ti!"
        )
    elif query.data == "ultimas":
        if os.path.exists(EXCEL_FILE):
            df = pd.read_excel(EXCEL_FILE)
            ultimas = df.tail(5).to_string(index=False)
            texto = f"üìä √öltimas se√±ales:\n{ultimas}"
        else:
            texto = "üì≠ No hay se√±ales registradas a√∫n."
    elif query.data == "ayuda":
        texto = "üÜò *Ayuda r√°pida*\n‚Ä¢ Usa /start para ver el men√∫\n‚Ä¢ Presiona los botones para navegar\n‚Ä¢ El bot trabaja solo, t√∫ solo revisa."
    else:
        texto = "‚ùì No entend√≠ esa opci√≥n."

    query.edit_message_text(text=texto, parse_mode="Markdown")

# ========================
# INICIAR TELEGRAM
# ========================
def iniciar_telegram_respuestas():
    print("üì© Bot escuchando mensajes de Telegram...")
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", responder_info))
    dispatcher.add_handler(CommandHandler("info", responder_info))
    dispatcher.add_handler(CallbackQueryHandler(manejar_botones))
    # dispatcher.add_handler(MessageHandler(Filters.text & (~Filters.command), responder_info))
    updater.start_polling()

# ========================
# TAREA: AN√ÅLISIS CADA HORA
# ========================
def tarea_analisis():
    print("üïí Tarea de an√°lisis iniciada")
    exchange = ccxt.binance()
    while True:
        print("üîÑ Ejecutando an√°lisis completo")
        nuevos = detectar_nuevos_pares(exchange)
        for nuevo in nuevos:
            enviar_mensaje(f"üö® NUEVO PAR LISTADO EN BINANCE: {nuevo}")
        for symbol in SYMBOLS:
            analizar_mercado(exchange, symbol)
        print(f"‚è≥ Esperando {INTERVALO_ANALISIS} segundos...")
        time.sleep(INTERVALO_ANALISIS)

# ========================
# INICIO MULTITAREA
# ========================
def main():
    print("‚úÖ BOT CRIPTO INICIADO CORRECTAMENTE")
    hilo1 = threading.Thread(target=tarea_analisis)
    hilo2 = threading.Thread(target=iniciar_telegram_respuestas)
    hilo1.start()
    hilo2.start()
    hilo1.join()
    hilo2.join()

if __name__ == "__main__":
    main()
